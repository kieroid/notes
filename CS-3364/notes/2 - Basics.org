
** DEFINE ALGORITHMS
An algorithm is a step-by-step procedure to solve a computationally-hard problem.

The differences between algorithms are the following:
- *Algorithms* are made in the design phase.
- *Programs* convert the design into a working implementation.

The initial phase of any product you try to develop is the *design* phase of a product. The algorithm-designing part is part of the initial phase. Programming, however, is created after the algorithm is made.

The person that writes the algorithms requires *domain knowledge.*
- Can be written in ANY language
- Chinese, English, German, etc.

The programmer may or may not have *domain knowledge.*
- Needs a programming language to achieve the end result.
- Java, C, C++, Rust, Python...

An algorithm is independent from the hardware and software running on the computer. It isn't specific.
- MacOS, Windows, Linux, etc.
- RISC-V, x86_64, ARM, etc.
- Requires prior analysis.

The program is dependent on the hardware and software running on the computer.
- x86_64 + Linux + GCC
- ARM + MacOS + Clang
- RISC-V + BSD + GCC
- Requires constant testing.

*** CHARACTERISTICS of ALGORITHMS
*Input*:
- Algorithm takes an input.

*Output*:
- Must generate at least one output.

*Definiteness*:
- Every line of the algorithm must be unambiguous.
- You cannot just write $\sqrt{-1}$. You must explain it.

*Finiteness*:
- Algorithm should be finite and stop at some point.

**** Important things to keep in mind:
*Time*:
- Time function

*Space*:
- Memory space the program is taking up.

*Network Consumption*

*Power Consumption*

*CPU Registers Consumption*

**in terms of this class, we will only be talking about time and space.**

*** EXAMPLE ALGORITHM TO MAKE A PEANUT BUTTER AND JELLY SANDWITCH:
Ingredients/Inputs:
- 2 Slices of white, american "loaf" bread
- 1 jar/container of Strawberry Jelly
- 1 jar/container of Crunchy Peanut Butter
- 1 standard butter knife

Algorithm:
- First, take one slice of bread. Put it on the table.
- Second, on top of the bread, apply around a tablespoon of peanut butter on a single side of the bread. Ensure the side you apply it on does not touch the table.
- Third, take another slice of bread. Put it beside the other slice of bread, but do not allow them to touch.
- On the new piece of bread, apply a tablespoon of Strawberry jelly.
- ...

*** WRITE AN ALGORITHM TO SWAP 2 NUMBERS:
Variables:
- Variable "A"
- Variable "B"
- Unknown Variable "C"

#+BEGIN_EXAMPLE pseudocode
BEGIN:
{
     C <- A;
     A <- B;
     B <- C;
}

$f(n) = 1 + 1 + 1 = 3$
#+END_EXAMPLE

*** ALGORITHM FOR FREQUENCY COUNT METHOD:

#+BEGIN_EXAMPLE pseudocode
Algo Sum(A,n)
{
        s = 0;
        for(i = 0; i < n; i++)
        {
                s = s + A[i]
        }
}
#+END_EXAMPLE

where:
\[\begin{matrix}
        \text{A} & 8 & 3 & 1 & 4 & 5\\
        \text{ } & 0 & 1 & 2 & 3 & 4
\end{matrix}\]

Space:
- A -> n elements
- i -> 1
- s -> 1
- n -> 1

S(n) = n+3
O(n)

There is an order of growth within time functions.
- $O(log(n))$ is logarithmic.
- $O(n^2)$ is quadratic.
- $O(n)$ is linear.
- $O(n^3)$ is qubic.
- $O(2^n)$ is exponential.

Write this in notes later:
- $1 < log(n) < \sqrt{n} < n < n\times log(n) < n^2 < n^3 < \cdots < 2^n < 3^n < \cdots < n^n$
- For a lot of these, it $2^n$ may start off smaller than $n^3$, but it progressivly gets bigger.

Asymptotic Notations:
- $\mathcal{O}$ (big o) - upperbound of a function.
- $\Omega$ (big Omega) - lowerbound of a function.
- $\Theta$ (big Theta) - average/tightbound of a function.

*** Big oh ($\mathcal{O}$)
A function $F(n) \in \mathcal{O}(g(n))$ iff the constants $c$ and $n_0$ such that  $F(n) < c\times g(n) \forall n \geq n_0$

Example:
- $F(n) = 2n+3$
- $2n+3\leq ?$
- Rule 1: Replace all lower order terms into equalivent higher order terms.
- $2n+3 \leq 2n+3n \forall n \geq 1$
- $2n+3 \leq 2n^2+3n^2$
- $n < \cdots < n^n$ is the upper bound of the function.
- $1 < \cdots < \sqrt{n}$ is the lower bound of the function.


*** Omega ($\Omega$)
A function $f(n) \in \Omega(g(n))$ iff $\exists$ tve constants c and no such that $f(n) \geq c\times g(n) \forall n\geq n_0$

*** Theta ($\Theta$)
A function $f(n) \in \Theta (g(n))$ iff $\exists$ ive constants $c_1$ and $c_2, n_0$ ST

(i have no idea what she is saying)


** Examples:
Matrix Addition:
#+begin_src c
for(i = 0; i < n; i++) { // n + 1
    for(j = 0l j < n; i++) { // n(n+1)
        c[i,j]=A[i,j]+B[i,j] // time complexity is n^2
    }
}
#+end_src

Matrix Multipiciation:
#+begin_src c
for(i = 0; i < n; i++){ // n + 1
    for(j = 0; j < n; j++){ // n(n + 1)
        c[i,j]=0 // n * n
        for(k = 0; k < n; k++){ // n * n(n + 1)
            c[i,j]=c[i,j]+A[i,k]*B[i,k] // n * n * n
        } // time complexity is 3n^2+4
}
#+end_src

*** Question 1: $O(n)$
#+begin_src c
for(i = 0; i < n; i++){...} // time complexity is n + 1 (O(n))
#+end_src

*** Question 2: $O(n)$
#+begin_src c
for(i = n ; i > 0; i--){...} //time complexity is n + 1 (O(n))
#+end_src

*** Question 3: $O(n)$
#+begin_src c
for(i = 0; i < n ; i + 2){...} // time complexity is n/2 (O(n))
#+end_src

*** Question 4: $O(n^2)$
#+begin_src c
for(i = 0; i < n; i++){ // n + 1
    for(j = 0; j < i; j++){...} // n(n+1)
} // time complexity is n(n+1)/2 (O(n^2))
#+end_src

*** Question 5: $O(\sqrt{n})$
#+begin_src c
p = 0; // P = (K(K+1))/2 > n. Therefore, k > sqrt(n)
for(i = 1; p <= n; i++){ // f(n) = O(sqrt(n))
    p = p + i;
}
#+end_src

** More examples
*** Example 6a:
$n^2+4n+6\in O(n^2)$ when $n = 10$

*** Example 6b:
$2n^2+3n+4\leq 2n^2+3n^2+4n^2$.

$f(n)=2n^2+3n+4$ where $c = 9$.

$\therefore (2n^2+3n+4)\in O(n^2)$

*** Example 6c:
$2n^2+3n+4 \in O(n^4)$ when $n = 2$.

$2n^2+3n+4 \leq 2n^4+3n^4+4n^4$.

$2n^2+3n&4 \leq 9n^4$ where $c=9$ and $n_0 = 1$.

*** Example 7a:
$\log_4(4n^2+5n+8) \in O(\log_4(n))$.

$\log_4(4n^2+5n+8)\leq\log_4(4n^2+5n^2+8n^2)$.

$\log_4(4n^2+5n+8)\leq\log_4(17n^2)$.

$\log_4(4n^2+5n+8)\leq\log_4(17)+2\log_4(n)$

$\log_4(17)\leq\log_4(n)\implies 4^{\log_4(17)}\leq 4^{\log_4(n)}\implies 17\leq n$.

$\therefore \log_4(4n^2+5n+8)\leq3\log_4(n)$ when $n \geq 17$.

*** Example 7b:
$\log_4(4n^2-5n+8)\in O(\log_4(n))$

Rule 2: When bounding above, drop negative terms.

$\log_4(4n^2-5+8)\leq\log_4(4n^2+8)$ (applying rule 2)

$\implies \leq \log_4(4n^2+8n^2)$ (applying rule 1)

$\implies \leq \log_4(12n^2)$

$\implies \leq \log_4(n^3)$ (when $n \geq 12$)

$\implies \log_4(4n^2-5n+8)\leq 3\log_4(n)$

*** Example 8a:
$2n^2+3n+4\in\Omega(n^2)$

Rule 3: When bounding below, drop lower order terms.

$\implies 2n^3+3n+4\geq 2n^2$

*** Example 8b:
$2n^2+3n+4\in\Omega(n)$

$2n^2+3n+4\geq 3n$ where $n_0=0$

$f(n)\geq c g(n)$

*** Example 9a:
$\log_4(4n^2+5n+8)\in\Omega(\log_4(n))$

$\log_4(4n^2+5n+8)\geq \log_4(4n^2)$

$\implies \geq \log_4(n_2)$

$\implies 2\log_4(n)$ where $c = 2, n_0 = 0$

*** Example 9b:
$\log_4(4n^2-5n+8)\in \Omega \log_4(n)$

$\log_4(4n^2-5n+8)\geq \log_4(4n^2-5n)$

As long as $1 \geq n$, $-5n\geq -5n^2$

$\implies \log_4(4n^2-5n^2)$

$\implies \log_4(-n^2)$ (undefined. $\log$ of a negative value.)

$-5n \geq -n^2$

$\implies \log_4(4n^2-n^2)\implies \log_4(3n^2)\implies \log_4(n^2)\implies 2log_4(n^2)$

*** Example 10:
$\sqrt{6n^3+7n^2+3n+5}\in O(n^{1.5})$
- $\implies \leq \sqrt{6n^3+7n^3+3n^3+5n^3}$
- $\implies \leq \sqrt{21n^3}$
- $\implies \leq \sqrt{21}\times n^{1.5}$
- Upper bound: $c_2=\sqrt{21}, g(n)=n^{1.5}$

$\sqrt{6n^3+\cdots}\in \theta(n^{1.5})$
- $c_1\times g(n)\leq f(n) \leq c_2\times g(n)$

$\sqrt{6n^3+\cdots}\in \Omega(n^{1.5})$
- $\implies \geq \sqrt{6n^3}$
- $\implies \geq \sqrt{6}\times n^{1.5}$
- Lower Bound: $c_1=\sqrt{6}, g(n)=n^{1.5}$

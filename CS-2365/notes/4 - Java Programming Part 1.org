
* Basics
** Java is a strongly typed language
- In java, every variable, expression, or object in java has a defined type, and the language ensures that the operations on these types are safe and consistent.
- It enforces strict type checking during both compile-time and runtime.
- Java allows type conversions, bust they must be explicit in certain cases, ensuring that the programmer is aware of potential data loss or changes in value.

#+begin_src java
double b = 100.45;
int a = b; //will show an error
int a = (int) b; //this will not show an error
#+end_src

** `String` class
In java, there is no primitive data type that holds a series of characters.
- `String` class from the Java standard library is used for this purpose.
- In order to be useful, the variable must be created to reference a `String` object.
  `String number;`
- Notice the `S` in `String` is upper case.

** Primitive vs. Reference Vars
Primitive variables actually contain the value that they have been assigned.

#+begin_src java
int number = 25;
#+end_src

- The value 25 will be stored in the memory location associated with the variable Number.
- Objects are not stored in variables, however. Instead, they are *referenced* by variables.
- When a variable references and object, it contains the memory address of the object's location.
- Then it is said that the variable references the object.

#+begin_src java
String cityName = "Charleston";
#+end_src

`cityName` Address to the object $\to$ `Charleston` The object that contains the character string "Charleston"

** The `Scanner` class
`Scanner` class
- To read input from keyboard
- Defined in `java.util`
- Use the following statement at the top of the programs: `impott java.util.Scanner;`
- Scanner objects work in `System.in`

To create a `Scanner` object:
- `Scanner keyboard = new Scanner (System.in);`

The purpose of `Scanner.nextLine();` is to take the next possible input and store it as a variable.
There also exists different inputs for different datatypes.
- `Scanner.nextLine();`
- `Scanner.nextInt();`
- `Scanner.nextDouble();`
- ...

#+begin_src java
Scanner keyboard = new Scanner (System.in); //create the new object
System.out.println("What is your name?");
name = keyboard.nextLine(); //take the input from the user
System.out.println("Your name is " + name); //print the input
#+end_src

* Classes
A class is a template which is used to define a new type of data.
- Variables (data) and methods defined within a class.
- Members of class

#+begin_src java
class classname {
    type instance-variable1;
    //...
    type instance-variableN;
    type methodname1(parameter-list) {
        //body of the method
    }
}
#+end_src

* Object
Objects of classes
- An object is an instance of a class
- Two-step process obtaining object of a class.
  - Declare a variable of the class type, acquire and actual physical copy of the object using `new` operator.

#+begin_src java
Box mybox;
MyBox = new mybox;
#+end_src


To taccess both the variables and methods within an object
- Dot(.) operator called as a seperator
- objectName.variable
- objectName.method()

#+begin_src java
Box mybox; //creates empty box
//vs
mybox = new Box() //creates "box" with the "box" object (including components)

//components
mybox.width()
mybox.height()
mybox.length()
#+end_src

*new* operator.
- Dynamically allocates memory for an object during run time.

To create a class, you do not need a "void main" method.
Here is an example:
#+begin_src java
public class Box{ //without public static void.
    double width;
    double depth;
    double height;

    double volume() {
        return width * depth * height;
    }
}

public static void main() { //public static void
    Box b1;
    b1 = new Box();

    Box b2;
    b2 = new Box();

    b1.depth = 23;
    b1.height = 3;
    b1.width = 2;

    System.out.println("Volume of Box b1 is " + b1.volume);

    Box b3,b4;
    b3 = new Box();
    b4 = b2; // due to this

    // the `new` operator has not been called. therefore, it's simply a copy (as if it was a variable.)
    // it's simply just a pointer. a symbolic link. something silly like that.

    b2.depth = 2;
    b2.height = 3;
    b2.width = 4;

    // b2 and b4 remain the same
    System.out.println(b2.volume());
    System.out.println(b4.volume());

    b4.depth = 2;
    b4.height = 1;
    b4.width = 4;

    // b2 and b4 remain the same
    System.out.println(b2.volume());
    System.out.println(b2.volume());
}
#+end_src

** Constructor
Primitive types do not need a `new` operator. (int, float, char, boolean)
- implemented as "normal" variable
- do not need to use `new` operator.

However, wrapper classes for primitive types:
#+begin_src java
String str = new String("Lubbock");
String str1 = "Lubbock";
#+end_src

** UML Diagram
Standard for Unified Modeling Language

Provides a set of standard diagrams for graphically depicting object-oriented systems.

The constructors go in the `methods` area.
*They do not have return type.*

_| class name |_
_| fields     |_   format: (+ or - depending on public or private)(name): (return type)
_| methods    |_   format: (+ or - depending on public or private)(name)((var type):(data type)): (return type)
